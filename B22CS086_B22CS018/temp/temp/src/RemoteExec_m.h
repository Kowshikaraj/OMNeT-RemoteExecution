//
// Generated file, do not edit! Created by opp_msgtool 6.1 from RemoteExec.msg.
//

#ifndef __REMOTEEXEC_M_H
#define __REMOTEEXEC_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class TaskMessage;
class ResultMessage;
class GossipMessage;
/**
 * Class generated from <tt>RemoteExec.msg:1</tt> by opp_msgtool.
 * <pre>
 * message TaskMessage
 * {
 *     int taskId;       // To identify which task this subtask belongs to
 *     int subtaskId;    // The ID of the subtask within the task
 *     string data;      // The data for the subtask
 * }
 * </pre>
 */
class TaskMessage : public ::omnetpp::cMessage
{
  protected:
    int taskId = 0;
    int subtaskId = 0;
    omnetpp::opp_string data;

  private:
    void copy(const TaskMessage& other);

  protected:
    bool operator==(const TaskMessage&) = delete;

  public:
    TaskMessage(const char *name=nullptr, short kind=0);
    TaskMessage(const TaskMessage& other);
    virtual ~TaskMessage();
    TaskMessage& operator=(const TaskMessage& other);
    virtual TaskMessage *dup() const override {return new TaskMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTaskId() const;
    virtual void setTaskId(int taskId);

    virtual int getSubtaskId() const;
    virtual void setSubtaskId(int subtaskId);

    virtual const char * getData() const;
    virtual void setData(const char * data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TaskMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TaskMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>RemoteExec.msg:7</tt> by opp_msgtool.
 * <pre>
 * message ResultMessage
 * {
 *     int taskId;       // The task ID this result belongs to
 *     int subtaskId;    // The subtask ID within the task
 *     int result;       // The computed result
 *     int serverId;     // The ID of the server that processed this
 * }
 * </pre>
 */
class ResultMessage : public ::omnetpp::cMessage
{
  protected:
    int taskId = 0;
    int subtaskId = 0;
    int result = 0;
    int serverId = 0;

  private:
    void copy(const ResultMessage& other);

  protected:
    bool operator==(const ResultMessage&) = delete;

  public:
    ResultMessage(const char *name=nullptr, short kind=0);
    ResultMessage(const ResultMessage& other);
    virtual ~ResultMessage();
    ResultMessage& operator=(const ResultMessage& other);
    virtual ResultMessage *dup() const override {return new ResultMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getTaskId() const;
    virtual void setTaskId(int taskId);

    virtual int getSubtaskId() const;
    virtual void setSubtaskId(int subtaskId);

    virtual int getResult() const;
    virtual void setResult(int result);

    virtual int getServerId() const;
    virtual void setServerId(int serverId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ResultMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ResultMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>RemoteExec.msg:14</tt> by opp_msgtool.
 * <pre>
 * message GossipMessage
 * {
 *     double timestamp;
 *     string score;
 *     int taskNumber;
 * }
 * </pre>
 */
class GossipMessage : public ::omnetpp::cMessage
{
  protected:
    double timestamp = 0;
    omnetpp::opp_string score;
    int taskNumber = 0;

  private:
    void copy(const GossipMessage& other);

  protected:
    bool operator==(const GossipMessage&) = delete;

  public:
    GossipMessage(const char *name=nullptr, short kind=0);
    GossipMessage(const GossipMessage& other);
    virtual ~GossipMessage();
    GossipMessage& operator=(const GossipMessage& other);
    virtual GossipMessage *dup() const override {return new GossipMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual double getTimestamp() const;
    virtual void setTimestamp(double timestamp);

    virtual const char * getScore() const;
    virtual void setScore(const char * score);

    virtual int getTaskNumber() const;
    virtual void setTaskNumber(int taskNumber);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GossipMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GossipMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline TaskMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<TaskMessage*>(ptr.get<cObject>()); }
template<> inline ResultMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<ResultMessage*>(ptr.get<cObject>()); }
template<> inline GossipMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<GossipMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __REMOTEEXEC_M_H

